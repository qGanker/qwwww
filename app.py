import streamlit as st
from pypdf import PdfReader
import random
import io
import pandas as pd
import os

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---

LEADERBOARD_FILE = "leaderboard.csv"

def initialize_leaderboard():
    """–°–æ–∑–¥–∞–µ—Ç CSV-—Ñ–∞–π–ª –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not os.path.exists(LEADERBOARD_FILE):
        with open(LEADERBOARD_FILE, "w", newline="") as f:
            f.write("–ù–∏–∫,–ì—Ä—É–ø–ø–∞,–ü—Ä–æ—Ü–µ–Ω—Ç,–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö,–í—Å–µ–≥–æ\n")

def save_score(nickname, group, score, total):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV-—Ñ–∞–π–ª."""
    percentage = round((score / total) * 100)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'a' (append) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    with open(LEADERBOARD_FILE, "a", newline="", encoding='utf-8') as f:
        f.write(f"{nickname},{group},{percentage},{score},{total}\n")

def load_leaderboard():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."""
    if os.path.exists(LEADERBOARD_FILE) and os.path.getsize(LEADERBOARD_FILE) > 20: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        try:
            df = pd.read_csv(LEADERBOARD_FILE)
            df_sorted = df.sort_values(by="–ü—Ä–æ—Ü–µ–Ω—Ç", ascending=False).reset_index(drop=True)
            st.subheader("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–¢–æ–ø-10)")
            st.dataframe(df_sorted.head(10))
        except pd.errors.EmptyDataError:
            st.info("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤: {e}")
    else:
        st.info("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º!")


def parse_questions_from_text(text):
    text_no_pages = "\n".join([line for line in text.split('\n') if "--- PAGE" not in line])
    question_blocks = text_no_pages.strip().split('?')
    parsed_questions = []
    for block in question_blocks:
        lines = [line.strip() for line in block.strip().split('\n') if line.strip()]
        if not lines: continue
        first_option_index = -1
        for i, line in enumerate(lines):
            if line.startswith('+') or line.startswith('-'):
                first_option_index = i
                break
        if first_option_index == -1: continue
        question_text = " ".join(lines[:first_option_index])
        options = []
        correct_answer = ""
        current_option_parts = []
        is_correct_buffer = False
        for line in lines[first_option_index:]:
            is_new_option_line = line.startswith('+') or line.startswith('-')
            if is_new_option_line and current_option_parts:
                full_option_text = " ".join(current_option_parts)
                options.append(full_option_text)
                if is_correct_buffer: correct_answer = full_option_text
                current_option_parts = []
            if is_new_option_line:
                is_correct_buffer = line.startswith('+')
            current_option_parts.append(line.lstrip('+- ').strip())
        if current_option_parts:
            full_option_text = " ".join(current_option_parts)
            options.append(full_option_text)
            if is_correct_buffer: correct_answer = full_option_text
        if question_text and options and correct_answer:
            parsed_questions.append({"question": question_text, "options": options, "correct_answer": correct_answer})
    return parsed_questions

def extract_text_from_pdf_pypdf(pdf_stream):
    try:
        reader = PdfReader(pdf_stream)
        full_text = "".join(page.extract_text() + "\n" for page in reader.pages)
        return full_text
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {e}")
        return None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'page' not in st.session_state:
    st.session_state.page = "login"
    st.session_state.nickname = ""
    st.session_state.group = ""
    st.session_state.questions = []
    st.session_state.current_question_index = 0
    st.session_state.score = 0
    st.session_state.answer_submitted = False
    st.session_state.user_answer = ""
    st.session_state.current_options = []

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
initialize_leaderboard()

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
st.set_page_config(layout="centered")
st.title("üéì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –ø–æ PDF")

# --- –°–¢–†–ê–ù–ò–¶–ê 1: –õ–û–ì–ò–ù ---
if st.session_state.page == "login":
    st.subheader("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    with st.form("login_form"):
        nickname = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:")
        group = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏ –∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
        if submitted:
            if nickname and group:
                st.session_state.nickname = nickname
                st.session_state.group = group
                st.session_state.page = "upload"
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
    
    st.divider()
    load_leaderboard()

# --- –°–¢–†–ê–ù–ò–¶–ê 2: –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê ---
elif st.session_state.page == "upload":
    st.write(f"–ü—Ä–∏–≤–µ—Ç, **{st.session_state.nickname}** –∏–∑ –≥—Ä—É–ø–ø—ã **{st.session_state.group}**!")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")
    
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf", label_visibility="collapsed")
    if uploaded_file:
        with st.spinner('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ PDF-—Ñ–∞–π–ª–∞...'):
            pdf_stream = io.BytesIO(uploaded_file.read())
            text = extract_text_from_pdf_pypdf(pdf_stream)
        if text:
            all_questions = parse_questions_from_text(text)
            if all_questions:
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(all_questions)}")
                st.session_state.questions = random.sample(all_questions, min(40, len(all_questions)))
                if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", type="primary"):
                    st.session_state.page = "quiz"
                    first_question_options = st.session_state.questions[0]['options'][:]
                    random.shuffle(first_question_options)
                    st.session_state.current_options = first_question_options
                    st.rerun()
            else:
                st.warning("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

# --- –°–¢–†–ê–ù–ò–¶–ê 3: –¢–ï–°–¢ ---
elif st.session_state.page == "quiz":
    if st.session_state.current_question_index < len(st.session_state.questions):
        q = st.session_state.questions[st.session_state.current_question_index]
        progress_value = (st.session_state.current_question_index) / len(st.session_state.questions)
        st.progress(progress_value, text=f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question_index + 1}/{len(st.session_state.questions)}")
        st.subheader(q["question"])
        
        if not st.session_state.answer_submitted:
            st.session_state.user_answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", st.session_state.current_options, key=f"q_{st.session_state.current_question_index}")
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                st.session_state.answer_submitted = True
                if st.session_state.user_answer == q["correct_answer"]:
                    st.session_state.score += 1
                st.rerun()
        else:
            if st.session_state.user_answer == q["correct_answer"]:
                st.success(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {st.session_state.user_answer}")
            else:
                st.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: {st.session_state.user_answer}")
                st.info(f"–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct_answer']}")
            
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.current_question_index += 1
                st.session_state.answer_submitted = False
                if st.session_state.current_question_index < len(st.session_state.questions):
                    next_question_options = st.session_state.questions[st.session_state.current_question_index]['options'][:]
                    random.shuffle(next_question_options)
                    st.session_state.current_options = next_question_options
                st.rerun()
    else:
        st.session_state.page = "results"
        st.rerun()

# --- –°–¢–†–ê–ù–ò–¶–ê 4: –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---
elif st.session_state.page == "results":
    st.header("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    total = len(st.session_state.questions)
    score = st.session_state.score
    
    percentage = round((score / total) * 100) if total > 0 else 0
    
    st.success(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total} ({percentage}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    save_score(st.session_state.nickname, st.session_state.group, score, total)
    
    st.divider()
    load_leaderboard()
    st.divider()

    if st.button("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑"):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è –ª–æ–≥–∏–Ω
        st.session_state.page = "upload"
        st.session_state.questions = []
        st.session_state.current_question_index = 0
        st.session_state.score = 0
        st.session_state.answer_submitted = False
        st.session_state.current_options = []
        st.rerun()
