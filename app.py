import streamlit as st
from pypdf import PdfReader
import random
import io

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ü–µ–Ω–∫–∏ ---
def parse_questions_from_text(text):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.
    """
    text_no_pages = "\n".join([line for line in text.split('\n') if "--- PAGE" not in line])
    question_blocks = text_no_pages.strip().split('?')
    parsed_questions = []

    for block in question_blocks:
        lines = [line.strip() for line in block.strip().split('\n') if line.strip()]
        if not lines:
            continue

        first_option_index = -1
        for i, line in enumerate(lines):
            if line.startswith('+') or line.startswith('-'):
                first_option_index = i
                break
        
        if first_option_index == -1:
            continue
            
        question_text = " ".join(lines[:first_option_index])
        
        options = []
        correct_answer = ""
        
        current_option_parts = []
        is_correct_buffer = False

        for line in lines[first_option_index:]:
            is_new_option_line = line.startswith('+') or line.startswith('-')
            
            if is_new_option_line and current_option_parts:
                full_option_text = " ".join(current_option_parts)
                options.append(full_option_text)
                if is_correct_buffer:
                    correct_answer = full_option_text
                current_option_parts = []

            if is_new_option_line:
                is_correct_buffer = line.startswith('+')
            
            current_option_parts.append(line.lstrip('+- ').strip())

        if current_option_parts:
            full_option_text = " ".join(current_option_parts)
            options.append(full_option_text)
            if is_correct_buffer:
                correct_answer = full_option_text
        
        if question_text and options and correct_answer:
            parsed_questions.append({
                "question": question_text,
                "options": options,
                "correct_answer": correct_answer
            })
            
    return parsed_questions


def extract_text_from_pdf_pypdf(pdf_stream):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pypdf."""
    try:
        reader = PdfReader(pdf_stream)
        full_text = ""
        for page in reader.pages:
            full_text += page.extract_text() + "\n" 
        return full_text
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF —Å –ø–æ–º–æ—â—å—é pypdf: {e}")
        return None

def get_grade(score, total_questions):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ –ø—è—Ç–∏–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ."""
    if total_questions == 0:
        return 0, "–¢–µ—Å—Ç –Ω–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω."
    percentage = (score / total_questions) * 100
    if percentage >= 90: return 5, "–û—Ç–ª–∏—á–Ω–æ! üéâ"
    elif percentage >= 75: return 4, "–•–æ—Ä–æ—à–æ! üëç"
    elif percentage >= 50: return 3, "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. ü§î"
    else: return 2, "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üîÅ"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'quiz_started' not in st.session_state:
    st.session_state.quiz_started = False
    st.session_state.questions = []
    st.session_state.current_question_index = 0
    st.session_state.score = 0
    st.session_state.answer_submitted = False
    st.session_state.user_answer = ""
    # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Å—Å–∏–∏
    st.session_state.current_options = []

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.set_page_config(layout="centered")
st.title("üéì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –ø–æ PDF")

if not st.session_state.quiz_started:
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf", label_visibility="collapsed")
    if uploaded_file:
        with st.spinner('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ PDF-—Ñ–∞–π–ª–∞...'):
            pdf_stream = io.BytesIO(uploaded_file.read())
            text = extract_text_from_pdf_pypdf(pdf_stream)
        if text:
            all_questions = parse_questions_from_text(text)
            if all_questions:
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(all_questions)}")
                st.session_state.questions = random.sample(all_questions, min(40, len(all_questions)))
                if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", type="primary"):
                    st.session_state.quiz_started = True
                    # –ì–æ—Ç–æ–≤–∏–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    first_question_options = st.session_state.questions[0]['options'][:]
                    random.shuffle(first_question_options)
                    st.session_state.current_options = first_question_options
                    st.rerun()
            else:
                st.warning("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
else:
    if st.session_state.current_question_index < len(st.session_state.questions):
        q = st.session_state.questions[st.session_state.current_question_index]
        progress_value = (st.session_state.current_question_index) / len(st.session_state.questions)
        st.progress(progress_value, text=f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question_index + 1}/{len(st.session_state.questions)}")
        st.subheader(q["question"])
        if not st.session_state.answer_submitted:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π, "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π" –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            st.session_state.user_answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", st.session_state.current_options, key=f"q_{st.session_state.current_question_index}")
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                st.session_state.answer_submitted = True
                if st.session_state.user_answer == q["correct_answer"]:
                    st.session_state.score += 1
                st.rerun()
        else:
            if st.session_state.user_answer == q["correct_answer"]:
                st.success(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {st.session_state.user_answer}")
            else:
                st.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: {st.session_state.user_answer}")
                st.info(f"–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct_answer']}")
            
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.current_question_index += 1
                st.session_state.answer_submitted = False
                # –ì–æ—Ç–æ–≤–∏–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                if st.session_state.current_question_index < len(st.session_state.questions):
                    next_question_options = st.session_state.questions[st.session_state.current_question_index]['options'][:]
                    random.shuffle(next_question_options)
                    st.session_state.current_options = next_question_options
                st.rerun()
    else:
        st.header("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        total = len(st.session_state.questions)
        score = st.session_state.score
        grade, comment = get_grade(score, total)
        st.success(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        st.title(f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {grade}")
        st.info(comment)
        if st.button("–ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑"):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
            st.session_state.quiz_started = False
            st.session_state.questions = []
            st.session_state.current_question_index = 0
            st.session_state.score = 0
            st.session_state.answer_submitted = False
            st.session_state.current_options = []
            st.rerun()
