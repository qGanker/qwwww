import streamlit as st
from pypdf import PdfReader
import random
import io

# --- –§—É–Ω–∫—Ü–∏–∏ ---

def parse_questions_from_text(text):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ."""
    text_no_pages = "\n".join([line for line in text.split('\n') if "--- PAGE" not in line])
    question_blocks = text_no_pages.strip().split('?')
    parsed_questions = []
    for block in question_blocks:
        lines = [line.strip() for line in block.strip().split('\n') if line.strip()]
        if not lines: continue
        first_option_index = -1
        for i, line in enumerate(lines):
            if line.startswith('+') or line.startswith('-'):
                first_option_index = i
                break
        if first_option_index == -1: continue
        question_text = " ".join(lines[:first_option_index])
        options = []
        correct_answer = ""
        current_option_parts = []
        is_correct_buffer = False
        for line in lines[first_option_index:]:
            is_new_option_line = line.startswith('+') or line.startswith('-')
            if is_new_option_line and current_option_parts:
                full_option_text = " ".join(current_option_parts)
                options.append(full_option_text)
                if is_correct_buffer: correct_answer = full_option_text
                current_option_parts = []
            if is_new_option_line:
                is_correct_buffer = line.startswith('+')
            current_option_parts.append(line.lstrip('+- ').strip())
        if current_option_parts:
            full_option_text = " ".join(current_option_parts)
            options.append(full_option_text)
            if is_correct_buffer: correct_answer = full_option_text
        if question_text and options and correct_answer:
            parsed_questions.append({"question": question_text, "options": options, "correct_answer": correct_answer})
    return parsed_questions

def extract_text_from_pdf_pypdf(pdf_stream):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é pypdf."""
    try:
        reader = PdfReader(pdf_stream)
        full_text = "".join(page.extract_text() + "\n" for page in reader.pages)
        return full_text
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {e}")
        return None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è) ---
if 'quiz_started' not in st.session_state:
    st.session_state.quiz_started = False
    st.session_state.questions = []
    st.session_state.current_question_index = 0
    st.session_state.score = 0
    st.session_state.answer_submitted = False
    st.session_state.user_answer = ""
    st.session_state.current_options = []

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.set_page_config(layout="centered")
st.title("üéì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –ø–æ PDF")

# –ï—Å–ª–∏ —Ç–µ—Å—Ç –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if not st.session_state.quiz_started:
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ—Å—Ç.")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª", type="pdf", label_visibility="collapsed")
    
    if uploaded_file:
        with st.spinner('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ PDF-—Ñ–∞–π–ª–∞...'):
            pdf_stream = io.BytesIO(uploaded_file.read())
            text = extract_text_from_pdf_pypdf(pdf_stream)
        
        if text:
            all_questions = parse_questions_from_text(text)
            if all_questions:
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(all_questions)}")
                st.divider()
                
                num_questions_slider = st.slider(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ:", 
                    min_value=5, 
                    max_value=len(all_questions), 
                    value=min(40, len(all_questions)), 
                    step=5
                )
                
                if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", type="primary"):
                    st.session_state.questions = random.sample(all_questions, num_questions_slider)
                    st.session_state.quiz_started = True
                    # –ì–æ—Ç–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    first_question_options = st.session_state.questions[0]['options'][:]
                    random.shuffle(first_question_options)
                    st.session_state.current_options = first_question_options
                    st.rerun()
            else:
                st.warning("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

# –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
else:
    # –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    if st.session_state.current_question_index < len(st.session_state.questions):
        q = st.session_state.questions[st.session_state.current_question_index]
        total_questions = len(st.session_state.questions)
        
        progress_value = (st.session_state.current_question_index) / total_questions
        st.progress(progress_value, text=f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question_index + 1}/{total_questions}")
        st.info(f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {st.session_state.score}")
        st.subheader(q["question"])
        
        if not st.session_state.answer_submitted:
            st.session_state.user_answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", st.session_state.current_options, key=f"q_{st.session_state.current_question_index}")
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                st.session_state.answer_submitted = True
                if st.session_state.user_answer == q["correct_answer"]:
                    st.session_state.score += 1
                st.rerun()
        else:
            if st.session_state.user_answer == q["correct_answer"]:
                st.success(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {st.session_state.user_answer}")
            else:
                st.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: {st.session_state.user_answer}")
                st.info(f"–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct_answer']}")
            
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.current_question_index += 1
                st.session_state.answer_submitted = False
                if st.session_state.current_question_index < total_questions:
                    next_q = st.session_state.questions[st.session_state.current_question_index]
                    next_options = next_q['options'][:]
                    random.shuffle(next_options)
                    st.session_state.current_options = next_options
                st.rerun()
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    else:
        st.header("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        total = len(st.session_state.questions)
        score = st.session_state.score
        percentage = round((score / total) * 100) if total > 0 else 0
        
        st.success(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total} ({percentage}%)")
        
        if percentage >= 90: st.balloons()
        
        if st.button("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑"):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
            st.session_state.quiz_started = False
            st.session_state.questions = []
            st.session_state.current_question_index = 0
            st.session_state.score = 0
            st.session_state.answer_submitted = False
            st.session_state.current_options = []
            st.rerun()
